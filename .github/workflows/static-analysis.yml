name: Static Analysis

on:
  pull_request:
  workflow_call: # workflow_call for future reusable workflow use
    inputs:
      kernel_config:
        default: .github/workflows/config
        type: string
env:
  kernel_config: ${{ inputs.kernel_config || '.github/workflows/config' }}

jobs:
  fetch_linux:
    runs-on: ubuntu-latest
    outputs:
      mods_touched: ${{ steps.get_mods.outputs.MODS_TOUCHED }}
      dir: ${{ env.dir }}
      key: ${{ env.key }}
    env:
      dir: .kernel
      key: ${{ github.event.pull_request.head.sha }}
    steps:
      - name: Relay branch information
        run:  echo "Base branch is ${{ github.event.pull_request.base.ref }} head is ${{ github.event.pull_request.head.ref }}"

      # create a new cache for this checkout, kernel is big and we want to reuse the base if we can
      - name: Load cache of kernels
        id: load-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.dir }}/
          key: ${{ env.key }}

      # https://github.com/actions/checkout/issues/552
      - name: Get number of commits to fetch
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"

      - name: Fetch merged kernel
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ env.key }} # key is a sha!
          path: ${{ env.dir }}
          fetch-depth: ${{ env.PR_FETCH_DEPTH }}

      - name: show files
        run: ls -la ${{ env.dir }} && cd ${{ env.dir }} && git remote -v && git branch && git log --oneline

      # needed by coccicheck
      - name: Get list of touched modules
        id: get_mods
        run: |
          # this is a bit lazy, assumes all files with Makefile live in a modules directory so just grabs dir;
          cd ${{ env.dir }};
          mods=$( \
            for i in `git diff --name-only HEAD~${{ github.event.pull_request.commits }} HEAD`; do \
              [ -e `dirname $i`/Makefile ] && dirname $i;
            done | sort | uniq);
          # change 'a b c' to 'VAR=["a", "b", "c"]'
          line="MODS_TOUCHED=[\"`echo $mods | sed 's|\s\+|", "|g'`\"]";
          # now add that to our matrix list for later
          echo "$line" >> "${GITHUB_OUTPUT}"

  check_patch:
    needs: fetch_linux
    runs-on: ubuntu-latest
    steps:
      # Fetch kernel we made in step 1
      - name: Load cache of kernels
        id: load-cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.fetch_linux.outputs.dir }}/
          key: ${{ needs.fetch_linux.outputs.key }}
          fail-on-cache-miss: true

      - name: Sanity check
        run: |
          echo "Running checkpatch on the following patches";
          git -C ${{ needs.fetch_linux.outputs.dir }} log --oneline HEAD~${{ github.event.pull_request.commits }}..HEAD

      - name: Run checkpatch
        run: cd ${{ needs.fetch_linux.outputs.dir }}; ./scripts/checkpatch.pl --ignore UNKNOWN_COMMIT_ID --strict --git HEAD~${{ github.event.pull_request.commits }}..HEAD

  # goal here is to run coccicheck on all modules touched then compare results to base branch
  # only fail when coccicheck results are different
  coccicheck:
    needs: fetch_linux # we depend here because we need the list of touched modules
    runs-on: ubuntu-latest
    outputs:
      out_prefix: ${{ env.out_prefix }}
    env:
      out_prefix: cocci-result
    strategy:
      matrix:
        test_mod_path: ${{ fromJSON(needs.fetch_linux.outputs.mods_touched) }}
        branch:
          - name: old
            gid: ${{ github.event.pull_request.base.sha }}
          - name: new
            gid: ${{ github.event.pull_request.head.sha }}
    steps:
      # use matrix information to generate id for this matrix combo
      # use commit sha so this can be reused by other pr runs
      - name: Get cocci cache id
        id: cache-gen
        run: |
          echo "id=${{ env.out_prefix }}_`basename ${{ matrix.test_mod_path }}`_${{ matrix.branch.gid }}" \
          >> "$GITHUB_OUTPUT";

      - name: Get cocci cache
        uses: actions/cache@v4
        id: cache-cocci
        with:
          path: ${{ steps.cache-gen.outputs.id }}
          key: ${{ steps.cache-gen.outputs.id }}
      
      # need things to run coccinelle
      - if: ${{ steps.cache-cocci.outputs.cache-hit != 'true' }}
        name: Install deps
        run: sudo apt-get -y update && sudo apt-get -y upgrade && sudo apt-get -y install coccinelle ocaml-findlib libelf-dev libpython3-dev 

      - if: ${{ steps.cache-cocci.outputs.cache-hit != 'true' }}
        name: Load cache of kernels
        id: load-cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.fetch_linux.outputs.dir }}/
          key: ${{ needs.fetch_linux.outputs.key }}
          fail-on-cache-miss: true
      
      # run coccicheck(module, git commit) store in cache of this runthrough of the matrix
      - if: ${{ steps.cache-cocci.outputs.cache-hit != 'true' }}
        name: Run coccicheck and store results
        run: |
          git -C ${{ needs.fetch_linux.outputs.dir }} checkout ${{ matrix.branch.gid }} && \
          git -C ${{ needs.fetch_linux.outputs.dir }} log --oneline && \
          make -C ${{ needs.fetch_linux.outputs.dir }} coccicheck -j `nproc` MODE=report M=${{ matrix.test_mod_path }} \
          | grep -v -e  "/usr/bin/spatch\|files match\|make:" \
          > ${{ steps.cache-gen.outputs.id }}

      - name: Print results
        run: |
          echo "Coccicheck results for ${{ matrix.branch.name }} branch and mod ${{ matrix.test_mod_path }}";
          file=${{ steps.cache-gen.outputs.id }};
          cat $file;

  coccicheck_parse_results:
    needs:
      - fetch_linux
      - coccicheck
    runs-on: ubuntu-latest
    env:
      out_prefix: ${{ needs.coccicheck.outputs.out_prefix }}
    strategy:
      matrix:
        test_mod_path: ${{ fromJSON(needs.fetch_linux.outputs.mods_touched) }}
    steps: 
      # get desired cache id's, this is copypasta from above, not sure how to make reusable
      - name: Get cocci cache id
        id: cache-gen
        run: |
          old_gid=${{ github.event.pull_request.head.sha }};
          new_gid=${{ github.event.pull_request.base.sha }};
          echo "old_id=${{ env.out_prefix }}_`basename ${{ matrix.test_mod_path }}`_$old_gid" \
          >> "$GITHUB_OUTPUT";
          echo "new_id=${{ env.out_prefix }}_`basename ${{ matrix.test_mod_path }}`_$new_gid" \
          >> "$GITHUB_OUTPUT";

      # Load cache of old and new
      - name: Load cache for old result
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-gen.outputs.old_id }}
          key: ${{ steps.cache-gen.outputs.old_id }}
          fail-on-cache-miss: true
 
      - name: Load cache for new result
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-gen.outputs.new_id }}
          key: ${{ steps.cache-gen.outputs.new_id }}
          fail-on-cache-miss: true

      - name: Check coccicheck differences
        run: |
          new=${{ steps.cache-gen.outputs.new_id }};
          old=${{ steps.cache-gen.outputs.old_id }};
          ls $new; ls $old;
          # a simple diff/comm will not do, we must create our own
          # the diff we care about is:
          # 1. lines in $new not in $old
          # 2. lines in $new that are more than just changed line numbers
          err="";
          while IFS= read -r line; do
            if grep -q "$line" $old; then
              continue; 
            fi;
            re=\\Q`echo "$line" | sed -E 's|[0-9]+|\\\E\\\d+\\\Q|g'`\\E ; # escape literals until \d
            new_count=`grep -cP "$re" $new`;
            old_count=`grep -cP "$re" $old || true`; #GHA will exit on nonzero rc so force zero if no hits
            if [ $new_count -gt $old_count ]; then
              err+="$line\n";
            fi;
          done < "$new"

          if [[ $err ]]; then
            printf "Found new cocci errors in new $new vs old $old, diff:\n$err\n\n$old:\n`cat $old`\n\n$new:\n`cat $new`\n";
            exit 1
          fi;

  # some static analysis checks need to be able to build, this is a check in and of itself
  # we should cache this and everything it needs for later
  # don't build the whole kernel please
  build:
    needs: fetch_linux
    runs-on: ubuntu-latest
    outputs:
      out_dir: ${{ env.out_dir }}
      key: ${{ env.built_key }}
      gpu_lib_dir: ${{ env.gpu_lib_dir }}
    env:
      out_dir: built
      gpu_lib_dir: not_so_open_source
      built_key: built_${{ needs.fetch_linux.outputs.key }}

    steps:
      - name: Create new cache for built results
        id: built-cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.out_dir }}/
            ${{ env.gpu_lib_dir }}/
          key: ${{ env.built_key }}

      # It would be very nice to quit this job early on cache success but that option does
      # not exist instead we must conditionalize every step
      - if: ${{ steps.built-cache.outputs.cache-hit != 'true' }}
        name: Load cache of kernels
        id: load-cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.fetch_linux.outputs.dir }}/
          key: ${{ needs.fetch_linux.outputs.key }}
          fail-on-cache-miss: true

      - if: ${{ steps.built-cache.outputs.cache-hit != 'true' }}
        name: Install deps
        run: |
            sudo apt-get -y update && sudo apt-get -y upgrade && \
            sudo apt-get -y install xutils-dev && \
            sudo apt-get -y install flex bison libelf-dev bc rpm

      - if: ${{ steps.built-cache.outputs.cache-hit != 'true' }}
        name: Make build dir and link to source dir
        run: |
            # We will make a soft clone of the source with links, so build and source are seperate;
            mkdir ${{ env.out_dir }};
            ls -la ; ls -la ${{ needs.fetch_linux.outputs.dir }};
            lndir `pwd`/${{ needs.fetch_linux.outputs.dir }} ${{ env.out_dir }};
            mkdir ${{ env.gpu_lib_dir }}

      - if: ${{ steps.built-cache.outputs.cache-hit != 'true' }}
        name: Fetch default config
        run: |
          echo "USING CONFIG FILE: ${{ env.kernel_config }}"
          ls -la ${{ env.out_dir }}/${{ env.kernel_config }};
          cp ${{ env.out_dir }}/${{ env.kernel_config }} ${{ env.out_dir }}/.config;
          yes "" | make -C ${{ env.out_dir }} -j `nproc` prepare;

      # It just so happens that SOME sources depend on out of tree files...
      # We also need to set build vars because SOME makefiles depend on rpm to find out of tree files...
      - if: ${{ steps.built-cache.outputs.cache-hit != 'true' }}
        name: Install AMD and NVIDIA drivers
        run: |
            nvidia=nvidia-kernel-source-535-server-open;
            sudo apt -y install $nvidia && \
            NVIDIA_DRIVER_SOURCE=`dpkg-query -L $nvidia | grep -oP ".*(?=nv-p2p.h)"`;
            amd_repo=https://repo.radeon.com/amdgpu-install/6.4.1/ubuntu/noble/;
            amd_pkg=amdgpu-install_6.4.60401-1_all.deb;
            wget $amd_repo$amd_pkg && \
            sudo apt -y install ./$amd_pkg && \
            sudo apt -y update && sudo apt -y install amdgpu-dkms && \
            AMDGPU_DRIVER_SOURCE=`dpkg-query -L amdgpu-dkms | grep -oP ".*(?=include/drm/amd_rdma.h)"` && \
            cp -r ${AMDGPU_DRIVER_SOURCE}/* ${{ env.gpu_lib_dir}}/ && \
            cp -r ${NVIDIA_DRIVER_SOURCE}/* ${{ env.gpu_lib_dir}}/ 

      - if: ${{ steps.built-cache.outputs.cache-hit != 'true' }}
        name: Build stuff!
        run: |
          ver=`git -C ${{ needs.fetch_linux.outputs.dir }} rev-parse --short HEAD`;
          cd ${{ env.out_dir }};
          extra=`pwd`/${{ env.gpu_lib_dir}}/;
          make NVIDIA_DRIVER_SOURCE=$extra AMDGPU_DRIVER_SOURCE=$extra -j `nproc` LOCALVERSION=-cibuild-$ver binrpm-pkg

      - if: ${{ steps.built-cache.outputs.cache-hit != 'true' }}
        name: Upload rpm atrifacts
        uses: actions/upload-artifact@v4
        with:
          name: rpms_${{ needs.fetch_linux.outputs.key }}
          path: ~/rpmbuild/RPMS/x86_64/

  # 90% of this is modified coccicheck stuff 
  smatch:
    needs:
      - fetch_linux # we depend here because we need the list of touched modules
      - build
    runs-on: ubuntu-latest
    outputs:
      out_prefix: ${{ env.out_prefix }}
    env:
      out_prefix: smatch-result
    strategy:
      matrix:
        test_mod_path: ${{ fromJSON(needs.fetch_linux.outputs.mods_touched) }}
        branch:
          - name: old
            gid: ${{ github.event.pull_request.base.sha }}
          - name: new
            gid: ${{ github.event.pull_request.head.sha }}
    steps:
      # use matrix information to generate id for this matrix combo
      # use commit sha so this can be reused by other pr runs
      - name: Get smatch cache id
        id: cache-gen
        run: |
          echo "id=${{ env.out_prefix }}_`basename ${{ matrix.test_mod_path }}`_${{ matrix.branch.gid }}" \
          >> "$GITHUB_OUTPUT";

      - name: Get smatch cache
        uses: actions/cache@v4
        id: cache-smatch
        with:
          path: ${{ steps.cache-gen.outputs.id }}
          key: ${{ steps.cache-gen.outputs.id }}
      
      # Ubuntu does not ship smatch
      - if: ${{ steps.cache-smatch.outputs.cache-hit != 'true' }}
        name: Install deps
        run: |
            sudo apt-get -y update && sudo apt-get -y upgrade && \
            sudo apt-get -y install flex bison libelf-dev bc rpm xutils-dev && \
            git clone https://repo.or.cz/smatch.git smatch && cd smatch && \
            make -j `nproc` && make install && sudo make BINDIR=/usr/bin install && \
            whereis smatch

      - if: ${{ steps.cache-smatch.outputs.cache-hit != 'true' }}
        name: Load src kernel cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.fetch_linux.outputs.dir }}/
          key: ${{ needs.fetch_linux.outputs.key }}
          fail-on-cache-miss: true

      - if: ${{ steps.cache-smatch.outputs.cache-hit != 'true' }}
        name: Load built kernel cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ needs.build.outputs.out_dir }}/
            ${{ needs.build.outputs.gpu_lib_dir }}/
          key: ${{ needs.build.outputs.key }}
          fail-on-cache-miss: true
      
      # git does not work properly in build dir (since its all links)
      - if: ${{ steps.cache-smatch.outputs.cache-hit != 'true' }}
        name: checkout correct branch
        run: |
          git -C ${{ needs.fetch_linux.outputs.dir }}/ checkout ${{ matrix.branch.gid }} && \
          lndir `pwd`/${{ needs.fetch_linux.outputs.dir }} ${{ needs.build.outputs.out_dir }} > /dev/null;

      # run smatch(module, git commit) store in cache of this runthrough of the matrix
      - if: ${{ steps.cache-smatch.outputs.cache-hit != 'true' }}
        name: Run smatch and store results
        run: |
          git -C ${{ needs.fetch_linux.outputs.dir }}/ log --oneline;
          outfile=`pwd`/${{ steps.cache-gen.outputs.id }};
          deps="NVIDIA_DRIVER_SOURCE=${{ needs.output.gpu_lib_dir }}";
          deps+=" AMDGPU_DRIVER_SOURCE=${{ needs.output.gpu_lib_dir }}";
          pushd ${{ needs.build.outputs.out_dir }};
          set -o pipefail && \
          make -s $deps CHECK="smatch -p=kernel" -j `nproc` C=2 M=${{ matrix.test_mod_path }} \
          2>&1 | tee $outfile;
          popd

      - name: Print results
        run: |
          echo "Smatch results for ${{ matrix.branch.name }} branch and mod ${{ matrix.test_mod_path }}";
          file=${{ steps.cache-gen.outputs.id }};
          cat $file;

  smatch_parse_results:
    needs:
      - fetch_linux
      - smatch
      - build
    runs-on: ubuntu-latest
    env:
      out_prefix: ${{ needs.smatch.outputs.out_prefix }}
    strategy:
      matrix:
        test_mod_path: ${{ fromJSON(needs.fetch_linux.outputs.mods_touched) }}
    steps: 
      # get desired cache id's, this is copypasta from above, not sure how to make reusable
      - name: Get smatch cache id
        id: cache-gen
        run: |
          old_gid=${{ github.event.pull_request.head.sha }};
          new_gid=${{ github.event.pull_request.base.sha }};
          echo "old_id=${{ env.out_prefix }}_`basename ${{ matrix.test_mod_path }}`_$old_gid" \
          >> "$GITHUB_OUTPUT";
          echo "new_id=${{ env.out_prefix }}_`basename ${{ matrix.test_mod_path }}`_$new_gid" \
          >> "$GITHUB_OUTPUT";

      # Load cache of old and new
      - name: Load cache for old result
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-gen.outputs.old_id }}
          key: ${{ steps.cache-gen.outputs.old_id }}
          fail-on-cache-miss: true
 
      - name: Load cache for new result
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-gen.outputs.new_id }}
          key: ${{ steps.cache-gen.outputs.new_id }}
          fail-on-cache-miss: true

      - name: Check smatch result differences
        run: |
          new=${{ steps.cache-gen.outputs.new_id }};
          old=${{ steps.cache-gen.outputs.old_id }};
          ls $new; cat $new; ls $old; cat $old;
          # a simple diff/comm will not do, we must create our own
          # the diff we care about is:
          # 1. lines in $new not in $old
          # 2. lines in $new that are more than just changed line numbers
          err="";
          echo "starting"
          while IFS= read -r line; do
            if grep -q "$line" $old; then
              continue; 
            fi;
            if [ `echo $line | wc -w ` -lt 2 ]; then
              continue;
            fi
            re=\\Q`echo "$line" | sed -E 's|[0-9]+|\\\E\\\d+\\\Q|g'`\\E ; # escape all literals until \d
            new_count=`grep -cP "$re" $new`;
            old_count=`grep -cP "$re" $old || true`;
            if [ $new_count -gt $old_count ]; then
              err+="$line\n";
            fi;
          done < "$new";
          echo "done";
          if [[ $err ]]; then
            printf "Found new smatch errors in new $new vs old $old, diff:\n$err\n\n$old:\n`cat $old`\n\n$new:\n`cat $new`\n";
            exit 1
          fi
